pipeline {
	agent any
	tools {nodejs "my_node"}
	environment {
		COMMIT_MESSAGE_CUSTOM = sh(script: 'git log -1  --pretty="%s"', , returnStdout: true).trim()
	}
    stages {

        stage("Env Variables") {
            steps {
				sh 'echo "$COMMIT_MESSAGE_CUSTOM"'
                sh "printenv"
				echo "The build number is ${env.GIT_BRANCH}"
				sh 'echo "I can access $BUILD_NUMBER in shell command as well."'
            }
        }

		stage('Prepare Repo') {
            steps {
				script {
					sh "rm -rf dist"
				}
			}
    	}

		stage('Prepare Deploy') {
			when {
                expression { COMMIT_MESSAGE_CUSTOM =~ /^release-.*$/ } 
			}
            steps {
				script {
					sh 'echo $BRANCH_NAME'
					sh "git checkout main && git pull"
				}
			}
    	}

		stage('Build') {
            steps {
                sh 'npm ci'
				sh 'tsc'
            }
        }

		stage('test') {
            steps {
                sh 'npm run test-jenkins --testMatch dist/tests/passwordReset.test.js'
            }
        }

        stage('SonarQube analysis') {
			steps {
				script {
					scannerHome = tool 'SonarScanner'
				}
				withSonarQubeEnv('my_server') {
					sh "${scannerHome}/bin/sonar-scanner"
				}
			}
    	}


		stage('Deploy') {
			when {
                expression { COMMIT_MESSAGE_CUSTOM =~ /^release-.*$/ } 
			}
            steps {
				script {
					sh '''#!/bin/bash
                 		if [ "$(git remote -v | grep heroku)" = '\n'  ];then
						 	echo "result $(git remote -v | grep heroku)"
							git remote add heroku https://git.heroku.com/mindory.git
						fi
         			'''
					sh "git add . && git commit -m \"mise en production\" && git push heroku main"
				}
			}
    	}
	}
}